#include <stdio.h>
#include <stdlib.h>
#include <omp.h>  
#include <time.h>

#define WIDTH 640
#define HEIGHT 480
#define MAX_ITER 255

struct complex {
    double real;
    double imag;
};

// Function to calculate the color of a particular pixel
int cal_pixel(struct complex c) {
    double z_real = 0;
    double z_imag = 0;
    double z_real2, z_imag2, lengthsq;
    int iter = 0;
    do {
        z_real2 = z_real * z_real;
        z_imag2 = z_imag * z_imag;
        lengthsq = z_real2 + z_imag2;
        if (lengthsq >= 4.0) break; 
        z_imag = 2 * z_real * z_imag + c.imag;
        z_real = z_real2 - z_imag2 + c.real;
        iter++;
    } while (iter < MAX_ITER);
    return iter;
}

// Function to save the image in PGM format
void save_pgm(const char *filename, int image[HEIGHT][WIDTH]) {
    FILE *pgmimg;
    pgmimg = fopen(filename, "wb"); 
    fprintf(pgmimg, "P2\n%d %d\n255\n", WIDTH, HEIGHT); 
    for (int i = 0; i < HEIGHT; i++) {
        for (int j = 0; j < WIDTH; j++) {
            fprintf(pgmimg, "%d ", image[i][j]);
        }
        fprintf(pgmimg, "\n");
    }
    fclose(pgmimg); 
}

int main() {
    int image[HEIGHT][WIDTH]; // Image array

    // Parallel region starts here
    #pragma omp parallel for schedule(static)
    for (int i = 0; i < HEIGHT; i++) {
        struct complex c;
        for (int j = 0; j < WIDTH; j++) {
            c.real = (j - WIDTH / 2.0) * 4.0 / WIDTH;
            c.imag = (i - HEIGHT / 2.0) * 4.0 / HEIGHT;
            image[i][j] = cal_pixel(c); 
        }
    }

    save_pgm("mandelbrot.pgm", image);

    return 0;
}
